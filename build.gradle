import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.4'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'org.liquibase.gradle' version '2.2.1'
}

group = 'com.productmanager'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'

	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// Test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'org.springframework.security:spring-security-test'

	// Liquibase
	liquibaseRuntime 'org.liquibase:liquibase-core:4.24.0'
	liquibaseRuntime 'info.picocli:picocli:4.7.5'
	liquibaseRuntime 'org.yaml:snakeyaml:1.33'
	liquibaseRuntime 'org.postgresql:postgresql:42.7.3'
}

test {
	useJUnitPlatform()
	testLogging {
		events TestLogEvent.FAILED,
				TestLogEvent.PASSED,
				TestLogEvent.SKIPPED
		showExceptions true
		showCauses true
		showStackTraces true

		afterSuite { desc, result ->
			if (!desc.parent) {
				def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
				println(output)
			}
		}
	}
}


task liquibaseExec {
	liquibase {
		activities {
			main {
				changelogFile   project.property("liquibaseChangelogFile")
				driver          project.property("liquibaseDriver")
				url             project.property("liquibaseUrl")
				username        project.property("liquibaseUsername")
				password        project.property("liquibasePassword")
			}
		}
	}
}